package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

@Autonomous(name = "20245TT5intothedeepautojava")
public class _20245TT5intothedeepauto extends LinearOpMode {

  private DcMotor frontLeftMotor;
  private DcMotor backRightMotor;
  private CRServo intakeServo;
  private CRServo specLeftServo;
  private CRServo specRightServo;
  private DcMotor backLeftMotor;
  private DcMotor frontRightMotor;
  private DcMotor mainArmMotor;
  private DcMotor intakeArmMotor;
  
  private void telem(){
    telemetry.addData("frPos", frontRightMotor.getCurrentPosition());
    telemetry.addData("flPos", frontLeftMotor.getCurrentPosition());
    telemetry.addData("brPos", backRightMotor.getCurrentPosition());
    telemetry.addData("blPos", backLeftMotor.getCurrentPosition());
  }
  private void drive(double fl, double fr, double bl, double br, int t){
    frontLeftMotor.setPower(-fl);
    frontRightMotor.setPower(-fr);
    backLeftMotor.setPower(bl);
    backRightMotor.setPower(br);
    sleep(t);
    
    frontLeftMotor.setPower(0);
    frontRightMotor.setPower(0);
    backLeftMotor.setPower(0);
    backRightMotor.setPower(0);
  }
  private void drive(double p, int t){
    frontLeftMotor.setPower(-p);
    frontRightMotor.setPower(-p);
    backLeftMotor.setPower(p);
    backRightMotor.setPower(p);
    sleep(t);
    
    frontLeftMotor.setPower(0);
    frontRightMotor.setPower(0);
    backLeftMotor.setPower(0);
    backRightMotor.setPower(0);
  }
  private void drive(double l, double r, int t){
    frontLeftMotor.setPower(-l);
    frontRightMotor.setPower(-r);
    backLeftMotor.setPower(l);
    backRightMotor.setPower(r);
    sleep(t);
    
    frontLeftMotor.setPower(0);
    frontRightMotor.setPower(0);
    backLeftMotor.setPower(0);
    backRightMotor.setPower(0);
  }
  
  
  private void arm(double ma, double ia, int t){
    mainArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    intakeArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    mainArmMotor.setPower(ma);
    intakeArmMotor.setPower(ia);
    sleep(t);
    mainArmMotor.setPower(0);
    intakeArmMotor.setPower(0);
  }
  
  private void arm(int ma, int ia){
      mainArmMotor.setTargetPosition(ma);
      intakeArmMotor.setTargetPosition(ia);
      mainArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      intakeArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      if (mainArmMotor.getTargetPosition() > mainArmMotor.getCurrentPosition()){
          mainArmMotor.setPower(.7);
      } else if(mainArmMotor.getTargetPosition()< mainArmMotor.getCurrentPosition()){
          mainArmMotor.setPower(-.7);
      }else{
          mainArmMotor.setPower(0);
      }
      if (intakeArmMotor.getTargetPosition() > intakeArmMotor.getCurrentPosition()){
          intakeArmMotor.setPower(0.5);
      } else if(intakeArmMotor.getTargetPosition() < intakeArmMotor.getCurrentPosition()){
          intakeArmMotor.setPower(-0.5);
      }else{
          intakeArmMotor.setPower(0);
      }
      sleep(100);
  }

  @Override
  public void runOpMode() {
    //initializing variables
    frontLeftMotor = hardwareMap.get(DcMotor.class, "frontLeftMotor");
    backRightMotor = hardwareMap.get(DcMotor.class, "backRightMotor");
    backLeftMotor = hardwareMap.get(DcMotor.class, "backLeftMotor");
    frontRightMotor = hardwareMap.get(DcMotor.class, "frontRightMotor");
    intakeServo = hardwareMap.get(CRServo.class, "intakeServo");
    specLeftServo = hardwareMap.get(CRServo.class, "specimenIntakeLeft");
    specRightServo = hardwareMap.get(CRServo.class, "specimenIntakeRight");
    intakeArmMotor = hardwareMap.get(DcMotor.class, "intakeArmMotor");
    mainArmMotor = hardwareMap.get(DcMotor.class, "mainArmMotor");
    
    frontLeftMotor.setDirection(DcMotor.Direction.REVERSE);
    backRightMotor.setDirection(DcMotor.Direction.REVERSE);
    intakeArmMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    mainArmMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    mainArmMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    intakeArmMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    frontLeftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    backLeftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    frontRightMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    backRightMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    mainArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    intakeArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    waitForStart();
    if (isStopRequested()) return;
        telem();
        telemetry.update();
      
      // CODE FOR AUTO STARTS HERE
      
      //place first specimen
      arm(2152,1); //Moves main arm to pos of first number and intake arm to pos of second number 
      sleep(800); // waits for that number of ms before moving on, this block is here to give arm time to raise
      drive(.8,.7,.8,.7, 200); // drive with 5 numbers in brackets means setting each motor power individually[front left, front right, back left, back right] with last number being how long it will run in ms
      drive(.5,1400); // drive with 2 numbers means setting all mtors to first number and second being time to run motor for in ms

      // lowers arm after placing specimen
      arm(1700,1);
      sleep(300);

      //spins to remove specimen if placing was unsuccessful
      specRightServo.setPower(-1);//sets power of the specimen servo
      specLeftServo.setPower(1);// since sides need to be opposite directions the rs is set to negative at the start

      // back up to prepare to pick up next piece
      drive(-.5,650); 
      arm(10, 200);
      drive(.8,-.8,360); // 3 numbers in drive sets left side motors to first value and rs motors to second, last number is still time in ms as usual
      sleep(700);
      specRightServo.setPower(0);
      specLeftServo.setPower(0);

      // moves to pick up first sample
      intakeServo.setPower(1); // sets power of intake servo
      drive(.8,520);
      drive(.3,1150);
      sleep(500);
      intakeServo.setPower(0);

      // turns to place sample in observation zone
      drive(.8,-.9,360);
      drive(.8, -.6, .6, .8, 400);
      drive(.5,300);
      sleep(200);
      intakeServo.setPower(-1);
      sleep(1000);
      intakeServo.setPower(0);

      // backs behind second sample to push it with robot
      drive(-.6,350);
      arm(10,0);
      drive(-.7,0,0,-.7,1550);      

      //pushing sample
      drive(.8,.5,.8,.6, 1500);

      //back up to give time to line up next specimen
      drive(-.8, 600);
      sleep(3000);

      // picks up second specimen
      specRightServo.setPower(1);
      specLeftServo.setPower(-1);
      drive(.3,1200);
      specRightServo.setPower(0);
      specLeftServo.setPower(0);

      //moves into position for second specimen
      drive(.8,-.9,860);
      drive(-.2,700);
      drive(-.8,.8,.8,-.8, 1500);
      arm(2152,1);
      sleep(1000);

      // Hangs second specimen
      drive(.8,.7,.8,.7, 800);
      arm(1700,1);

      // Moves into observation 
      drive(-.8,-.7,-.8,-.7, 600);
      drive(.8,-.8,-.8,.8, 1600);

      
      while (opModeIsActive()) {
        telem();
        telemetry.update();
      }
  
  }
}
