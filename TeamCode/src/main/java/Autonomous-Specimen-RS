package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

@Autonomous(name = "_20245TT5intothedeepautojava")
public class _20245TT5intothedeepauto extends LinearOpMode {

  private DcMotor frontLeftMotor;
  private DcMotor backRightMotor;
  private CRServo intakeServo;
  private Servo clawServo;
  private DcMotor backLeftMotor;
  private DcMotor frontRightMotor;
  private DcMotor mainArmMotor;
  private DcMotor intakeArmMotor;
  
  private void telem(){
    telemetry.addData("frPos", frontRightMotor.getCurrentPosition());
    telemetry.addData("flPos", frontLeftMotor.getCurrentPosition());
    telemetry.addData("brPos", backRightMotor.getCurrentPosition());
    telemetry.addData("blPos", backLeftMotor.getCurrentPosition());
  }
  private void motor(double fl, double fr, double bl, double br, int t){
    frontLeftMotor.setPower(-fl);
    frontRightMotor.setPower(-fr);
    backLeftMotor.setPower(bl);
    backRightMotor.setPower(br);
    sleep(t);
    
    frontLeftMotor.setPower(0);
    frontRightMotor.setPower(0);
    backLeftMotor.setPower(0);
    backRightMotor.setPower(0);
  }
  private void motor(double p, int t){
    frontLeftMotor.setPower(-p);
    frontRightMotor.setPower(-p);
    backLeftMotor.setPower(p);
    backRightMotor.setPower(p);
    sleep(t);
    
    frontLeftMotor.setPower(0);
    frontRightMotor.setPower(0);
    backLeftMotor.setPower(0);
    backRightMotor.setPower(0);
  }
  private void motor(double l, double r, int t){
    frontLeftMotor.setPower(-l);
    frontRightMotor.setPower(-r);
    backLeftMotor.setPower(l);
    backRightMotor.setPower(r);
    sleep(t);
    
    frontLeftMotor.setPower(0);
    frontRightMotor.setPower(0);
    backLeftMotor.setPower(0);
    backRightMotor.setPower(0);
  }
  
  
  private void arm(double ma, double ia, int t){
    mainArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    intakeArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    mainArmMotor.setPower(ma);
    intakeArmMotor.setPower(ia);
    sleep(t);
    mainArmMotor.setPower(0);
    intakeArmMotor.setPower(0);
  }
  
  private void arm(int ma, int ia){
    /*if ((gamepad2.dpad_down || gamepad2.dpad_up || gamepad2.x || gamepad2.y)){
      if (gamepad2.y){
        mainArmMotor.setTargetPosition(2122);
        intakeArmMotor.setTargetPosition(0);
      } else if (gamepad2.x){
        mainArmMotor.setTargetPosition(1077);
        intakeArmMotor.setTargetPosition(0);
      } else if (gamepad2.dpad_down){
        mainArmMotor.setTargetPosition(547);
        intakeArmMotor.setTargetPosition(281);
      } else{
        mainArmMotor.setTargetPosition(3778);
        intakeArmMotor.setTargetPosition(313);
      }*/
      mainArmMotor.setTargetPosition(ma);
      intakeArmMotor.setTargetPosition(ia);
      mainArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      intakeArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      if (mainArmMotor.getTargetPosition() > mainArmMotor.getCurrentPosition()){
          mainArmMotor.setPower(.7);
      } else if(mainArmMotor.getTargetPosition()< mainArmMotor.getCurrentPosition()){
          mainArmMotor.setPower(-.7);
      }else{
          mainArmMotor.setPower(0);
      }
      if (intakeArmMotor.getTargetPosition() > intakeArmMotor.getCurrentPosition()){
          intakeArmMotor.setPower(0.5);
      } else if(intakeArmMotor.getTargetPosition() < intakeArmMotor.getCurrentPosition()){
          intakeArmMotor.setPower(-0.5);
      }else{
          intakeArmMotor.setPower(0);
      }
      sleep(100);
  }

  @Override
  public void runOpMode() {
    //initializing variables
    frontLeftMotor = hardwareMap.get(DcMotor.class, "frontLeftMotor");
    backRightMotor = hardwareMap.get(DcMotor.class, "backRightMotor");
    backLeftMotor = hardwareMap.get(DcMotor.class, "backLeftMotor");
    frontRightMotor = hardwareMap.get(DcMotor.class, "frontRightMotor");
    intakeServo = hardwareMap.get(CRServo.class, "intakeServo");
    clawServo = hardwareMap.get(Servo.class, "clawServo");
    intakeArmMotor = hardwareMap.get(DcMotor.class, "intakeArmMotor");
    mainArmMotor = hardwareMap.get(DcMotor.class, "mainArmMotor");
    
    frontLeftMotor.setDirection(DcMotor.Direction.REVERSE);
    backRightMotor.setDirection(DcMotor.Direction.REVERSE);
    intakeArmMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    mainArmMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    mainArmMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    intakeArmMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    frontLeftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    backLeftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    frontRightMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    backRightMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    mainArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    intakeArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    waitForStart();
    if (isStopRequested()) return;
        
      // Put run blocks here.
      clawServo.setPosition(.9);
      sleep(100);
      arm(1, 0, 200);
      sleep(100);
      
      motor(.8,.7,.8,.7, 485);
      arm(1, 0, 900);
      motor(.5,310);
      sleep(100);
      arm(-.6,0,620);
      clawServo.setPosition(.605);
      arm(1,0,400);
      motor(-.5,400);
      
      
      arm(10, 200);
      motor(.8,-.8,352);
      sleep(700);
      intakeServo.setPower(1);
      motor(.8,520);
      motor(.3,1100);
      sleep(1000);
      intakeServo.setPower(0);
      motor(.8,-.9,390);
      motor(.8, -.6, .6, .8, 550);
      sleep(200);
      intakeServo.setPower(-1);
      sleep(500);
      
      
      intakeServo.setPower(0);
      motor(-.8,.8,680);
      arm(10, 210);
      intakeServo.setPower(1);
      motor(.8,130);
      motor(.3,1000);
      sleep(1000);
      intakeServo.setPower(0);
      motor(.8,-.8,700);
      motor(0.8,400);
      intakeServo.setPower(-1);
      sleep(1200);
      arm(10,0);
      intakeServo.setPower(0);
      motor(-.8,.8,800);
      motor(-.8,550);
      while (opModeIsActive()) {
        telem();
        telemetry.update();
      }
  
  }
}
