package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;


@Autonomous(name = "lsspecimen")
public class LSspecimen extends LinearOpMode {
private DcMotor frontLeftMotor;
  private DcMotor backRightMotor;
  private CRServo intakeServo;
  private CRServo specLeftServo;
  private CRServo specRightServo;
  private DcMotor backLeftMotor;
  private DcMotor frontRightMotor;
  private DcMotor mainArmMotor;
  private DcMotor intakeArmMotor;
  
  private void telem(){
    telemetry.addData("frPos", frontRightMotor.getCurrentPosition());
    telemetry.addData("flPos", frontLeftMotor.getCurrentPosition());
    telemetry.addData("brPos", backRightMotor.getCurrentPosition());
    telemetry.addData("blPos", backLeftMotor.getCurrentPosition());
  }
  private void drive(double fl, double fr, double bl, double br, int t){
    frontLeftMotor.setPower(-fl);
    frontRightMotor.setPower(-fr);
    backLeftMotor.setPower(bl);
    backRightMotor.setPower(br);
    sleep(t);
    
    frontLeftMotor.setPower(0);
    frontRightMotor.setPower(0);
    backLeftMotor.setPower(0);
    backRightMotor.setPower(0);
  }
  private void drive(double p, int t){
    frontLeftMotor.setPower(-p);
    frontRightMotor.setPower(-p);
    backLeftMotor.setPower(p);
    backRightMotor.setPower(p);
    sleep(t);
    
    frontLeftMotor.setPower(0);
    frontRightMotor.setPower(0);
    backLeftMotor.setPower(0);
    backRightMotor.setPower(0);
  }
  private void drive(double l, double r, int t){
    frontLeftMotor.setPower(-l);
    frontRightMotor.setPower(-r);
    backLeftMotor.setPower(l);
    backRightMotor.setPower(r);
    sleep(t);
    
    frontLeftMotor.setPower(0);
    frontRightMotor.setPower(0);
    backLeftMotor.setPower(0);
    backRightMotor.setPower(0);
  }
  
  
  private void arm(double ma, double ia, int t){
    mainArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    intakeArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    mainArmMotor.setPower(ma);
    intakeArmMotor.setPower(ia);
    sleep(t);
    mainArmMotor.setPower(0);
    intakeArmMotor.setPower(0);
  }
  
  private void arm(int ma, int ia){
      mainArmMotor.setTargetPosition(ma);
      intakeArmMotor.setTargetPosition(ia);
      mainArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      intakeArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
      if (mainArmMotor.getTargetPosition() > mainArmMotor.getCurrentPosition()){
          mainArmMotor.setPower(.7);
      } else if(mainArmMotor.getTargetPosition()< mainArmMotor.getCurrentPosition()){
          mainArmMotor.setPower(-.7);
      }else{
          mainArmMotor.setPower(0);
      }
      if (intakeArmMotor.getTargetPosition() > intakeArmMotor.getCurrentPosition()){
          intakeArmMotor.setPower(0.5);
      } else if(intakeArmMotor.getTargetPosition() < intakeArmMotor.getCurrentPosition()){
          intakeArmMotor.setPower(-0.5);
      }else{
          intakeArmMotor.setPower(0);
      }
      sleep(100);
  }

  @Override
  public void runOpMode() {
    //initializing variables
    frontLeftMotor = hardwareMap.get(DcMotor.class, "frontLeftMotor");
    backRightMotor = hardwareMap.get(DcMotor.class, "backRightMotor");
    backLeftMotor = hardwareMap.get(DcMotor.class, "backLeftMotor");
    frontRightMotor = hardwareMap.get(DcMotor.class, "frontRightMotor");
    intakeServo = hardwareMap.get(CRServo.class, "intakeServo");
    specLeftServo = hardwareMap.get(CRServo.class, "specimenIntakeLeft");
    specRightServo = hardwareMap.get(CRServo.class, "specimenIntakeRight");
    intakeArmMotor = hardwareMap.get(DcMotor.class, "intakeArmMotor");
    mainArmMotor = hardwareMap.get(DcMotor.class, "mainArmMotor");
    
    frontLeftMotor.setDirection(DcMotor.Direction.REVERSE);
    backRightMotor.setDirection(DcMotor.Direction.REVERSE);
    intakeArmMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    mainArmMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    mainArmMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    intakeArmMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    frontLeftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    backLeftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    frontRightMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    backRightMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    mainArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    intakeArmMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    waitForStart();
    if (isStopRequested()) return;
        telem();
        telemetry.update();
      
      // CODE FOR AUTO STARTS HERE
      drive(.5,.3,1,-.5,400);
      drive(-.8, .5, .5,-.8,650);
      arm(3700,320);
      sleep(1200);
      drive(-.4,700);
      sleep(200);
      intakeServo.setPower(-1);
      sleep(2700);
      intakeServo.setPower(1);
      
      arm(10,200);
      sleep(2000);
      drive(-.5,.1,-.5,.5,500);
      drive(.1,-.5,-.5,-.5,500);
      while (opModeIsActive()) {
        telem();
        telemetry.update();
      }
  
  }
}
